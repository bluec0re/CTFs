#!/usr/bin/env python
# encoding: utf-8

import socket
import re

table  = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ "
#table2 = b'ABDHPf"g$k,0KVr^=%m:8a1MZzIRj*wCFLXvABDHPf"g$k,0KVr^=%m:8a1MZz!e9c5Up@+yGNb3Qh&o>\'q\\/6Wt|_?)u~}'
table2 = bytes(reversed(table))


def recv_until(s, delim):
    data = b''
    while True:
        c = s.recv(1)
        data += c
        if data.endswith(delim):
            break
    return data


def login1(s):
    s.send(b'A\n')
    while True:
        data = s.recv(1024)
        m = re.search(br'Password \[(.)\]\tExpected \[(.*)\]$', data)
        if not m:
            if b'valid' in data:
                break
            raise IOError(data)

        offset = m.group(1)
        pwd = m.group(2)
        print("A > {}, Given Pwd: {}".format(offset, pwd))
        offset = table.index(offset)
        print("Offset: {}".format(offset))
        pwd = bytes([table[(table.index(c) - offset) % len(table)] for c in pwd])
        print("Password: {}".format(pwd))
        s.send(pwd + b"\n")
    data = s.recv(1024)
    print(data)


def rebuild_table(s):
    new_table = b''
    for i in range(0, len(table), 62):
        s.send(table[i:i+62] + b'\n')
        data = s.recv(1024)
        m = re.search(br'Password \[(.+)\]\tExpected \[(.+)\]', data)
        if not m:
            print(data)
            raise IOError()
        new_table += m.group(1)
        pwd = m.group(2)

    return new_table, pwd


def login2(s):
    s.send(b'A'+ b'\n')
    while True:
        data = s.recv(1024)
        m = re.search(br'Password \[(.)\]\tExpected \[(.*)\]$', data)
        if not m:
            if b'valid' in data:
                break
            raise IOError(data)

        offset = m.group(1)
        pwd = m.group(2)
        print("A > {}, Given Pwd: {}".format(offset, pwd))
        offset = table.index(offset)
        print("Offset: {}".format(offset))
        new_pwd = b''
        last_val = 0
        for i, c in enumerate(pwd):
            idx = (table.index(c) - last_val) % len(table)
            last_val += table.index(c) 
            new_pwd += table[idx:idx+1]
        print("Password: {}".format(new_pwd))
        s.send(new_pwd + b"\n")
    data = s.recv(1024)
    print(data)


def login3(s):
    s.send(b'A'+ b'\n')
    while True:
        data = s.recv(1024)
        m = re.search(br'Password \[(.)\]\tExpected \[(.*)\]$', data)
        if not m:
            if b'valid' in data:
                break
            raise IOError(data)

        offset = m.group(1)
        pwd = m.group(2)
        print("A > {}, Given Pwd: {}".format(offset, pwd))
        offset = table.index(offset)
        print("Offset: {}".format(offset))
        pwd = bytes([table[(table.index(c) - offset) % len(table)] for c in reversed(pwd)])
        print("Password: {}".format(pwd))
        s.send(pwd + b"\n")
    data = s.recv(1024)
    print(data)


def login4(s):
    s.send(b'AA'+ b'\n')
    while True:
        data = s.recv(1024)
        m = re.search(br'Password \[(..)\]\tExpected \[(.*)\]$', data)
        if not m:
            if b'valid' in data:
                break
            raise IOError(data)

        offset = m.group(1)
        pwd = m.group(2)
        print("Given Pwd: {}".format(pwd))
        offset = table.index(offset[1]) - table.index(offset[0])
        print("Offset: {}".format(offset))
        pwd = bytes([table[(table.index(c) - offset*i) % len(table)] for i,c in enumerate(pwd)])
        print("Password: {}".format(pwd))
        s.send(pwd + b"\n")
    data = s.recv(1024)
    print(data)


def login5(s):
    print("##### 5 ####")
    new_pwd = b'A' * 22

    j = 0
    diff = 0
    while True:
        j += 1
        print("[{}] Sending {}".format(j, new_pwd))
        s.send(new_pwd + b"\n")
        data = recv_until(s, b'\n')
        m = re.search(br'Password \[(.+)\]\tExpected \[(.*)\]$', data)
        if not m:
            print(data)
            break

        offset = m.group(1)
        print("Got     {}".format(offset))
        pwd = m.group(2)
        print("{} > {}, Given Pwd: {}".format(new_pwd[:1], offset[:1], pwd))
        offset = (table.index(offset[0:1]) - table.index(new_pwd[0:1])) % len(table)

        print("Offset: {}".format(offset))
        new_pwd = b''
        last_val = 0
        for i, c in enumerate(pwd, 1):
            idx = (table.index(c) - last_val - offset) % len(table)
            last_val += table.index(c)
            new_pwd += table[idx:idx+1]
        new_pwd = bytes(reversed(new_pwd))
        #print("Password: {}".format(new_pwd))
    data = s.recv(1024)
    print(data)


def login6(s):
    print("##### 6 ####")
    new_pwd = b'ABCDEFGHIJKL'

    j = 0
    diff = 0
    while True:
        j += 1
        print("Sending {}".format(new_pwd))
        s.send(new_pwd + b"\n")
        data = recv_until(s, b'\n')
        m = re.search(br'Password \[(.+)\]\tExpected \[(.*)\]$', data)
        if not m:
            print(data)
            break

        offset = m.group(1)
        print("Got     {}".format(offset))
        pwd = m.group(2)
        print("{} > {}, Given Pwd: {}".format(new_pwd[:1], offset[:1], pwd))
        offset = (table.index(offset[0:1]) - table.index(new_pwd[0:1])) % len(table)

        print("Offset: {}".format(offset))
        #if j == 1:
        #    new_pwd = b'BBBB'
        #else:
        #    new_pwd = b'AABB'

        #continue
        pwd = b''.join([pwd[i:i+2] if (i // 2) % 2 == 0 else bytes(reversed(pwd[i:i+2])) for i in range(0, len(pwd), 2)])
        print(pwd)
        new_pwd = b''
        last_val = 0
        for i, c in enumerate(pwd):
            idx = (table.index(c) - last_val - offset - i) % len(table)
            last_val += table.index(c)
            new_pwd += table[idx:idx+1]
        #print("Password: {}".format(new_pwd))
    data = s.recv(1024)
    print(data)




if __name__ == '__main__':
    s = socket.create_connection(('blackbox_ced7f267475a0299446fa86c26d77161.quals.shallweplayaga.me', 18324))
    
    data = recv_until(s, b'easy boxes:\n')
    
    login1(s)
    login2(s)
    login3(s)
    login4(s)
    login5(s)
    login6(s)
    
    s.close()
